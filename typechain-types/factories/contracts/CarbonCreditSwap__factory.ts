/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  CarbonCreditSwap,
  CarbonCreditSwapInterface,
} from "../../contracts/CarbonCreditSwap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_carbonCreditContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "_usdcContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "seller",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "buyer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    inputs: [],
    name: "carbonCreditContract",
    outputs: [
      {
        internalType: "contract IERC721",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "seller",
        type: "address",
      },
    ],
    name: "executeSwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdcContract",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516112923803806112928339818101604052810190610032919061034a565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100a55760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161009c9190610399565b60405180910390fd5b6100b48161022360201b60201c565b5060018081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361012b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161012290610411565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361019a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101919061047d565b60405180910390fd5b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061049d565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610317826102ec565b9050919050565b6103278161030c565b811461033257600080fd5b50565b6000815190506103448161031e565b92915050565b60008060408385031215610361576103606102e7565b5b600061036f85828601610335565b925050602061038085828601610335565b9150509250929050565b6103938161030c565b82525050565b60006020820190506103ae600083018461038a565b92915050565b600082825260208201905092915050565b7f496e76616c696420636172626f6e2063726564697420636f6e74726163740000600082015250565b60006103fb601e836103b4565b9150610406826103c5565b602082019050919050565b6000602082019050818103600083015261042a816103ee565b9050919050565b7f496e76616c6964205553444320636f6e74726163740000000000000000000000600082015250565b60006104676015836103b4565b915061047282610431565b602082019050919050565b600060208201905081810360008301526104968161045a565b9050919050565b610de6806104ac6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631323e88b14610067578063436ff00d14610085578063715018a6146100a157806376e4fc2a146100ab5780638da5cb5b146100c9578063f2fde38b146100e7575b600080fd5b61006f610103565b60405161007c919061091b565b60405180910390f35b61009f600480360381019061009a91906109af565b610129565b005b6100a9610611565b005b6100b3610625565b6040516100c09190610a23565b60405180910390f35b6100d161064b565b6040516100de9190610a4d565b60405180910390f35b61010160048036038101906100fc9190610a68565b610674565b005b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101316106fa565b60008211610174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016b90610af2565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e856040518263ffffffff1660e01b81526004016101e69190610b21565b602060405180830381865afa158015610203573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102279190610b51565b73ffffffffffffffffffffffffffffffffffffffff161461027d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027490610bca565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff16600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663081812fc856040518263ffffffff1660e01b81526004016102ef9190610b21565b602060405180830381865afa15801561030c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103309190610b51565b73ffffffffffffffffffffffffffffffffffffffff1614806103ec5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e985e9c582306040518363ffffffff1660e01b81526004016103aa929190610bea565b602060405180830381865afa1580156103c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103eb9190610c4b565b5b61042b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042290610cc4565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3383856040518463ffffffff1660e01b815260040161048a93929190610ce4565b6020604051808303816000875af11580156104a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104cd9190610c4b565b61050c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050390610d67565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e8233866040518463ffffffff1660e01b815260040161056b93929190610ce4565b600060405180830381600087803b15801561058557600080fd5b505af1158015610599573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167fdd36740e2a012d93061a0d99eaa9107860955de4e90027d3cf465a055026c40785856040516105fc929190610d87565b60405180910390a361060c610740565b505050565b610619610749565b61062360006107d0565b565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61067c610749565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106ee5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016106e59190610a4d565b60405180910390fd5b6106f7816107d0565b50565b600260015403610736576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002600181905550565b60018081905550565b610751610894565b73ffffffffffffffffffffffffffffffffffffffff1661076f61064b565b73ffffffffffffffffffffffffffffffffffffffff16146107ce57610792610894565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016107c59190610a4d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006108e16108dc6108d78461089c565b6108bc565b61089c565b9050919050565b60006108f3826108c6565b9050919050565b6000610905826108e8565b9050919050565b610915816108fa565b82525050565b6000602082019050610930600083018461090c565b92915050565b600080fd5b6000819050919050565b61094e8161093b565b811461095957600080fd5b50565b60008135905061096b81610945565b92915050565b600061097c8261089c565b9050919050565b61098c81610971565b811461099757600080fd5b50565b6000813590506109a981610983565b92915050565b6000806000606084860312156109c8576109c7610936565b5b60006109d68682870161095c565b93505060206109e78682870161095c565b92505060406109f88682870161099a565b9150509250925092565b6000610a0d826108e8565b9050919050565b610a1d81610a02565b82525050565b6000602082019050610a386000830184610a14565b92915050565b610a4781610971565b82525050565b6000602082019050610a626000830184610a3e565b92915050565b600060208284031215610a7e57610a7d610936565b5b6000610a8c8482850161099a565b91505092915050565b600082825260208201905092915050565b7f5072696365206d7573742062652067726561746572207468616e207a65726f00600082015250565b6000610adc601f83610a95565b9150610ae782610aa6565b602082019050919050565b60006020820190508181036000830152610b0b81610acf565b9050919050565b610b1b8161093b565b82525050565b6000602082019050610b366000830184610b12565b92915050565b600081519050610b4b81610983565b92915050565b600060208284031215610b6757610b66610936565b5b6000610b7584828501610b3c565b91505092915050565b7f53656c6c6572206973206e6f7420746865206f776e6572000000000000000000600082015250565b6000610bb4601783610a95565b9150610bbf82610b7e565b602082019050919050565b60006020820190508181036000830152610be381610ba7565b9050919050565b6000604082019050610bff6000830185610a3e565b610c0c6020830184610a3e565b9392505050565b60008115159050919050565b610c2881610c13565b8114610c3357600080fd5b50565b600081519050610c4581610c1f565b92915050565b600060208284031215610c6157610c60610936565b5b6000610c6f84828501610c36565b91505092915050565b7f4e4654206e6f7420617070726f76656420666f72207472616e73666572000000600082015250565b6000610cae601d83610a95565b9150610cb982610c78565b602082019050919050565b60006020820190508181036000830152610cdd81610ca1565b9050919050565b6000606082019050610cf96000830186610a3e565b610d066020830185610a3e565b610d136040830184610b12565b949350505050565b7f55534443207472616e73666572206661696c6564000000000000000000000000600082015250565b6000610d51601483610a95565b9150610d5c82610d1b565b602082019050919050565b60006020820190508181036000830152610d8081610d44565b9050919050565b6000604082019050610d9c6000830185610b12565b610da96020830184610b12565b939250505056fea26469706673582212206a3f2506589bc31daaa09404e48c75f13141482364007eb8c0e3772ce5e0201864736f6c634300081c0033";

type CarbonCreditSwapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CarbonCreditSwapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CarbonCreditSwap__factory extends ContractFactory {
  constructor(...args: CarbonCreditSwapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _carbonCreditContract: AddressLike,
    _usdcContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _carbonCreditContract,
      _usdcContract,
      overrides || {}
    );
  }
  override deploy(
    _carbonCreditContract: AddressLike,
    _usdcContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _carbonCreditContract,
      _usdcContract,
      overrides || {}
    ) as Promise<
      CarbonCreditSwap & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): CarbonCreditSwap__factory {
    return super.connect(runner) as CarbonCreditSwap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CarbonCreditSwapInterface {
    return new Interface(_abi) as CarbonCreditSwapInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): CarbonCreditSwap {
    return new Contract(address, _abi, runner) as unknown as CarbonCreditSwap;
  }
}
